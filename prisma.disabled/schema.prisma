generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          UserRole  @default(TENANT)
  passwordHash  String    // for Credentials provider (demo)
  emailVerified DateTime? // added for adapter compatibility
  image         String?   // added for adapter compatibility
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  properties    Property[]
  tenancies     Tenancy[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Property {
  id          String   @id @default(cuid())
  address     String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  owner     User      @relation(fields: [ownerId], references: [id])
  tenancies Tenancy[]
  
  @@map("properties")
}

model Tenancy {
  id         String      @id @default(cuid())
  propertyId String
  tenantId   String
  startDate  DateTime
  endDate    DateTime?
  bondAmount Decimal
  status     TenancyStatus @default(ACTIVE)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  
  // Relations
  property   Property    @relation(fields: [propertyId], references: [id])
  tenant     User        @relation(fields: [tenantId], references: [id])
  inspections Inspection[]
  payments   Payment[]
  
  @@map("tenancies")
}

model Inspection {
  id        String   @id @default(cuid())
  tenancyId String
  type      InspectionType
  photos    String[] // URLs
  notes     String?
  score     Int?     // Trust score
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  tenancy Tenancy @relation(fields: [tenancyId], references: [id])
  reports Report[]
  
  @@map("inspections")
}

model Payment {
  id        String   @id @default(cuid())
  tenancyId String
  amount    Decimal
  type      PaymentType
  status    PaymentStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  tenancy Tenancy @relation(fields: [tenancyId], references: [id])
  
  @@map("payments")
}

model Report {
  id           String   @id @default(cuid())
  inspectionId String
  pdfUrl       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  inspection Inspection @relation(fields: [inspectionId], references: [id])
  
  @@map("reports")
}

// --- NextAuth models ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?     @map("expiresAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken")
  session_state     String?  @map("sessionState")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  TENANT
  LANDLORD
  AGENT
}

enum TenancyStatus {
  ACTIVE
  ENDED
  DISPUTED
}

enum InspectionType {
  MOVE_IN
  MOVE_OUT
  ROUTINE
}

enum PaymentType {
  BOND
  WEEKLY
  REFUND
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
